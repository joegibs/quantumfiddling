using ITensors
using Random
using LinearAlgebra
using Statistics
using NDTensors

function RandomUnitaryMatrix(dim)
  random_matrix=randn(ComplexF64,(dim,dim))
  Q, _ = NDTensors.qr_positive(random_matrix)
  return Q
end

function rho_to_dense(rho,s)
    #=
    MPO to Dense Matrix
    rho: itensor mpo
    s: itensor sites
    =#
    Hitensor = ITensor(1.)
    N = length(s)
    for i = 1:N
        Hitensor *= rho[i]
    end
  
    A=Array(Hitensor,prime(s),s)
    return reshape(A,2^N,2^N)
end

function partial_transpose(rho::MPO, sites)
    #=
    wikipedia.org/wiki/Peres–Horodecki_criterion
    =#
    rho1 = deepcopy(rho)
    for n in sites
      rho1[n] = swapinds(rho1[n], siteinds(rho1, n)...)
    end
    return rho1
end

function trace_norm_dense(A)
    #=
    A: dense matrix
    =#
    e,_=eigen(A)
    # _,S,_=svd(A)
    return (sum(abs.(e))-sum(e))/2
end

function purity(rho::MPO)
  pur = tr(apply(rho,rho))
  return pur
end

function negativity(rho::MPO, b, s)
    #=
    negativity of an itensor mpo
    =#
    n = length(rho)
    #orthogonalize!(rho,b)
    rho_temp = deepcopy(rho)
    # normalize!(rho_temp)
    M=partial_transpose(rho_temp,[b:n...])

    #turn this mpo into a single tensor
    T = rho_to_dense(M,s)
    return  (trace_norm_dense(T))
end
function log_negativity(A::MPO, b, s)
  neg = negativity(A, b, s)
  return log2(2*neg+1)
end

function rec_ent(rho::MPO,b,s)
    #=
    Bipartite entropy across b for itensor mpo
    =#
    n = length(rho)
    # orthogonalize!(rho,b)
    rho_temp = deepcopy(rho)
    # s = siteinds("Qubit",n) 
  
    #contract half   x x x x | | | |
    L = ITensor(1.0)
      for i = 1:b
        L *= tr(rho_temp[i])
      end
      # absorb
      rho_temp[b+1] *= L
      # no longer a proper mpo
      M =MPO(n-b)
      for i in 1:(n-b)
          M[i]=rho_temp[b+i]
      end
      M=M/tr(M)
      #turn this mpo into a single tensor
      T = prod(M)
   
      # @show T
      _,S,_ = svd(T,s)#[inds(T)[i] for i = 1:2:length(inds(T))])
      SvN = 0.0
      for n in 1:dim(S, 1)
        p = S[n,n]
        if p != 0
          SvN -= p * log2(p)
        end
    end
    return SvN
end


ITensors.op(::OpName"Pup",::SiteType"Qubit") =
 [1 0
  0 0]
ITensors.op(::OpName"Pdn",::SiteType"Qubit") =
 [0 0
  0 1]
ITensors.op(::OpName"Rand",::SiteType"Qubit") = 
    RandomUnitaryMatrix(4)
ITensors.op(::OpName"IX",::SiteType"Qubit") = 
    IXgate(4)

ITensors.op(::OpName"Iden",::SiteType"Qubit") = 
  [1 0
  0 1]
ITensors.op(::OpName"Iden2",::SiteType"Qubit") = 
  [1 0 0 0
  0 1 0 0
  0 0 1 0
  0 0 0 1]
ITensors.op(::OpName"K0",::SiteType"Qubit"; p::Number=0) =
  [1 0
   0 √(1-p)]

function make_row(N,eoo,pc)
    #=
    N: number of sites
    eoo: even or odd step
    pc: periodic
    =#
    if eoo
        lst =[[i,i+1] for i in 1:2:N-1]
    else
        lst = [[i,i+1] for i in 2:2:N-1]
    end
    if pc
        if !eoo && !Bool(N%2)
            append!(lst,[[N,1]])
        end
    end
    return lst
end

function gen_samp_row(N,meas_p)
    #=
    generate array of bools to sample or not
    =#
    return [rand()<meas_p ? 1 : 0 for i in 1:N]
end

function samp_mps(rho::MPO,s,samp_row)
    #=
    sample an itensor mpo and return the next resulting mps
    =#
    N = length(rho)
    samp =deepcopy(rho)
    samples= sample(samp)
    magz = [x == 1 ? "Pup" : "Pdn" for x in samples]
  
    gates = ITensor[]
  
    for i in 1:N
      if Bool(samp_row[i])
          hj = op(magz[i],s[i])
          push!(gates, hj)
      end
    end
    rho = apply(gates, rho;apply_dag=true)
   
    rho=rho/tr(rho)
    return rho
  end

  function gen_step(N,rho,s,step_num,meas_p)
    #=
    perform one step of brickwork
    =#
    #apply gates
  row = make_row(N,Bool(step_num%2),false)
  gates = ITensor[]
  measured_vals=([0],[0])
  for j in row
      s1 = s[j[1]]
      s2 = s[j[2]]
      hj = op("Rand",[s1,s2])
      Gj=hj
      push!(gates, Gj)
  end

  rho = apply(gates, rho;apply_dag=true,cutoff=1E-15)

  #calculate obs
  measured_vals = (rec_ent(rho,Int(round(N/2)),s),log_negativity(rho,Int(round(N/2)),s))
    

  samp_row=gen_samp_row(N,meas_p)
  rho=rho/tr(rho)
  rho = samp_mps(rho,s,samp_row)
  

  return rho,measured_vals
end


function do_exp(N,steps,meas_p)
    s = siteinds("Qubit", N) #+1 for ancilla
    psi = productMPS(s, "Up" )
    rho=outer(psi',psi)
  
    svn =[]
    neg= []
    for i in 1:steps
        rho ,(meas_svn,meas_neg)= gen_step(N,rho,s,i,meas_p)
        append!(svn,meas_svn)
        append!(neg,meas_neg)
    end
    return svn,neg
  end

  function do_trials(N,steps,meas_p,trials)
    svn_trials,tri_trials = do_exp(N,steps,meas_p)
    for i in 2:trials
        print(i)
        nSvn,ntm = do_exp(N,steps,meas_p)
        svn_trials = 2*mean([(i-1)/i*svn_trials,1/i*nSvn])
        tri_trials = 2*mean([(i-1)/i*tri_trials,1/i*ntm])
    end
    return svn_trials,tri_trials
end

decays=[]
growths=[]
sits = [4,6]
interval = 0.0:0.1:0.8
for n in sits#[6,8,10]
N = n
# cutoff = 1E-8
steps = 4*N
meas_p=0.
svns=[]
muts = []
    for i in interval
        print("\n meas_p $i \n")
        svn,mut =do_trials(N,steps,i,50)
        avgsvn = [(svn[x]+svn[x+1])/2 for x in 1:2:(size(svn)[1]-1)]
        avgmut = [(mut[x]+mut[x+1])/2 for x in 1:2:(size(mut)[1]-1)]
        append!(svns,[avgsvn])
        append!(muts,[avgmut])
    end
decay = [svns[i][end] for i in 1:size(svns)[1]]
growth = [muts[i][end] for i in 1:size(muts)[1]]
append!(decays,[decay])
append!(growths,[growth])

end


p = plot([0.0:0.1:0.8...],decays,title=string("Bip_ent Gat: 2haar, varying meas_p"), label=string.(transpose([4:2:14...])), linewidth=3,xlabel = "Meas_P", ylabel = L"$\textbf{S_{vn}}(L/2)$")
p = plot([0.0:0.1:0.8...],real(growths),title=string("Bip_ent Gat: 2haar, varying meas_p"), label=string.(transpose([4:2:14...])), linewidth=3,xlabel = "Meas_P", ylabel = L"$\textbf{S_{vn}}(L/2)$")
